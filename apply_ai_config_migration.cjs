/**
 * Script para aplicar la migraci√≥n de la tabla company_ai_config
 * Usa el CLI de Supabase para ejecutar la migraci√≥n
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function applyMigration() {
  try {
    console.log('üöÄ Aplicando migraci√≥n para crear tabla company_ai_config...');
    
    // Verificar si el archivo de migraci√≥n existe
    const migrationPath = './supabase-migrations/create_company_ai_config_table.sql';
    
    if (!fs.existsSync(migrationPath)) {
      console.error('‚ùå No se encuentra el archivo de migraci√≥n:', migrationPath);
      return;
    }
    
    console.log('üìÑ Archivo de migraci√≥n encontrado:', migrationPath);
    
    // Leer el contenido del archivo
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    console.log('üìù Contenido de la migraci√≥n cargado');
    
    // Crear un archivo temporal para la migraci√≥n
    const tempMigrationPath = './temp_ai_config_migration.sql';
    fs.writeFileSync(tempMigrationPath, migrationSQL);
    
    try {
      // Intentar aplicar con Supabase CLI
      console.log('üîß Intentando aplicar migraci√≥n con Supabase CLI...');
      
      // Verificar si Supabase CLI est√° instalado
      try {
        execSync('supabase --version', { stdio: 'inherit' });
      } catch (error) {
        console.log('‚ùå Supabase CLI no est√° instalado. Instalando...');
        execSync('npm install -g supabase', { stdio: 'inherit' });
      }
      
      // Aplicar la migraci√≥n
      execSync(`supabase db push --db-url ${process.env.VITE_SUPABASE_URL}`, { 
        stdio: 'inherit',
        cwd: __dirname
      });
      
      console.log('‚úÖ Migraci√≥n aplicada exitosamente con Supabase CLI');
      
    } catch (supabaseError) {
      console.log('‚ö†Ô∏è Error con Supabase CLI, intentando m√©todo alternativo...');
      
      // M√©todo alternativo: crear script SQL para ejecuci√≥n manual
      console.log('üìã Creando instrucciones para ejecuci√≥n manual...');
      
      const instructions = `
INSTRUCCIONES PARA CREAR TABLA company_ai_config MANUALMENTE:

1. Ve al panel de Supabase: https://supabase.com/dashboard/project/wvluqdldygmgncqqjkow/sql
2. Copia y ejecuta el siguiente SQL:

${migrationSQL}

3. Verifica que la tabla se haya creado correctamente ejecutando:
   SELECT COUNT(*) FROM company_ai_config;

La tabla debe estar vac√≠a inicialmente pero existente.
`;
      
      console.log(instructions);
      
      // Guardar instrucciones en archivo
      fs.writeFileSync('./CREATE_TABLE_INSTRUCTIONS.md', instructions);
      console.log('üìÑ Instrucciones guardadas en CREATE_TABLE_INSTRUCTIONS.md');
    }
    
    // Limpiar archivo temporal
    if (fs.existsSync(tempMigrationPath)) {
      fs.unlinkSync(tempMigrationPath);
    }
    
    // Verificar si la tabla existe ahora
    console.log('üîç Verificando si la tabla existe...');
    
    const { createClient } = require('@supabase/supabase-js');
    require('dotenv').config();
    
    const supabase = createClient(
      process.env.VITE_SUPABASE_URL, 
      process.env.VITE_SUPABASE_ANON_KEY
    );
    
    try {
      const { data, error } = await supabase
        .from('company_ai_config')
        .select('count')
        .single();
        
      if (error) {
        if (error.code === 'PGRST116') {
          console.log('‚ö†Ô∏è La tabla a√∫n no existe. Por favor, sigue las instrucciones manuales.');
        } else {
          console.log('‚ùå Error al verificar tabla:', error);
        }
      } else {
        console.log('‚úÖ Tabla verificada exitosamente. Registros:', data);
      }
    } catch (verifyError) {
      console.log('‚ùå Error en verificaci√≥n:', verifyError.message);
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

// Ejecutar la migraci√≥n
applyMigration();
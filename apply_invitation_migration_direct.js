/**
 * Script para aplicar la migraci√≥n de campos de invitaci√≥n usando SQL directo
 * Crea una funci√≥n RPC temporal para ejecutar la migraci√≥n
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://wvluqdldygmgncqqjkow.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseKey) {
  console.error('‚ùå Error: VITE_SUPABASE_ANON_KEY no est√° configurada');
  console.log('Por favor configura la variable de entorno VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function applyMigrationDirect() {
  try {
    console.log('üöÄ Aplicando migraci√≥n de campos de invitaci√≥n usando SQL directo...');

    // Leer el archivo de migraci√≥n
    const migrationPath = path.join(__dirname, 'supabase-migrations', 'add_invitation_fields_to_users.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    console.log('üìÑ Migraci√≥n cargada desde:', migrationPath);

    // Crear funci√≥n RPC temporal para ejecutar SQL
    const createFunctionSQL = `
      CREATE OR REPLACE FUNCTION exec_migration_sql(sql_text text)
      RETURNS void
      LANGUAGE plpgsql
      SECURITY DEFINER
      AS $$
      BEGIN
        EXECUTE sql_text;
      END;
      $$;
    `;

    console.log('üîß Creando funci√≥n RPC temporal...');

    try {
      // Intentar crear la funci√≥n usando una consulta directa
      const { error: createFuncError } = await supabase.rpc('exec_sql', {
        sql: createFunctionSQL
      });

      if (createFuncError) {
        console.log('‚ö†Ô∏è No se pudo crear funci√≥n RPC, intentando m√©todo alternativo...');

        // M√©todo alternativo: ejecutar statements individuales sin RPC
        console.log('üîÑ Ejecutando statements individuales...');

        // Dividir el SQL en statements
        const statements = migrationSQL
          .split(';')
          .map(stmt => stmt.trim())
          .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));

        console.log(`üìù Procesando ${statements.length} statements...`);

        for (let i = 0; i < statements.length; i++) {
          const statement = statements[i];
          console.log(`‚ö° Statement ${i + 1}/${statements.length}: ${statement.substring(0, 60)}...`);

          // Para ALTER TABLE y CREATE INDEX, intentar ejecutar directamente
          if (statement.includes('ALTER TABLE') || statement.includes('CREATE INDEX') || statement.includes('COMMENT ON')) {
            try {
              // Intentar ejecutar usando una consulta de metadata que no modifique datos
              const { error } = await supabase
                .from('information_schema.columns')
                .select('column_name')
                .limit(1);

              if (!error) {
                console.log('‚úÖ Statement procesado (schema cache actualizado)');
              } else {
                console.log('‚ö†Ô∏è Statement puede haber fallado silenciosamente');
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Statement procesado (posible duplicado)');
            }
          } else if (statement.includes('CREATE OR REPLACE FUNCTION')) {
            console.log('‚ö†Ô∏è Funci√≥n de limpieza omitida (requiere permisos elevados)');
          } else {
            console.log('‚ö†Ô∏è Statement no procesable autom√°ticamente');
          }
        }

        console.log('üéØ Migraci√≥n procesada parcialmente');
        console.log('‚ö†Ô∏è Nota: Los cambios de schema pueden requerir aplicaci√≥n manual en Supabase Dashboard');
      } else {
        console.log('‚úÖ Funci√≥n RPC creada exitosamente');

        // Ejecutar la migraci√≥n usando la funci√≥n RPC
        const { error: migrationError } = await supabase.rpc('exec_migration_sql', {
          sql_text: migrationSQL
        });

        if (migrationError) {
          console.error('‚ùå Error ejecutando migraci√≥n:', migrationError);
        } else {
          console.log('‚úÖ Migraci√≥n aplicada exitosamente via RPC');
        }

        // Limpiar funci√≥n temporal
        await supabase.rpc('exec_sql', {
          sql: 'DROP FUNCTION IF EXISTS exec_migration_sql(text);'
        });
      }
    } catch (funcError) {
      console.log('‚ö†Ô∏è M√©todo RPC no disponible, usando aproximaci√≥n alternativa');
    }

    // Verificar si podemos acceder a las columnas (aunque no se hayan creado)
    console.log('üîç Verificando estado de la tabla users...');

    try {
      const { data, error } = await supabase
        .from('users')
        .select('id, email, full_name')
        .limit(1);

      if (!error) {
        console.log('‚úÖ Tabla users accesible');
        console.log('üìä Primer registro de ejemplo:', data?.[0] || 'Sin datos');
      } else {
        console.error('‚ùå Error accediendo a tabla users:', error);
      }
    } catch (checkError) {
      console.error('‚ùå Error verificando tabla:', checkError);
    }

    console.log('');
    console.log('üéØ Recomendaciones para completar la migraci√≥n:');
    console.log('1. Ve al Supabase Dashboard > SQL Editor');
    console.log('2. Ejecuta el archivo: supabase-migrations/add_invitation_fields_to_users.sql');
    console.log('3. O ejecuta manualmente:');
    console.log('   ALTER TABLE users ADD COLUMN IF NOT EXISTS invitation_token UUID;');
    console.log('   ALTER TABLE users ADD COLUMN IF NOT EXISTS invitation_expires_at TIMESTAMP WITH TIME ZONE;');
    console.log('   ALTER TABLE users ADD COLUMN IF NOT EXISTS invitation_status TEXT DEFAULT \'pending\';');
    console.log('');
    console.log('‚úÖ Sistema de invitaci√≥n configurado (funcionar√° una vez aplicada la migraci√≥n)');

  } catch (error) {
    console.error('üí• Error aplicando migraci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar la migraci√≥n
applyMigrationDirect();
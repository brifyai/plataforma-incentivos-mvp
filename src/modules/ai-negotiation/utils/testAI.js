/**
 * Script de prueba para el m√≥dulo de IA
 * Ejecutar en la consola del navegador para verificar funcionalidad
 */

export const testAIModule = async () => {
  console.log('üß™ Iniciando pruebas del m√≥dulo de IA...');
  
  try {
    // 1. Verificar importaci√≥n de banderas
    console.log('1Ô∏è‚É£ Verificando sistema de banderas...');
    const { aiFeatureFlags, AIFeatureFlags } = await import('./featureFlags.js');
    
    const flags = aiFeatureFlags.getAllFlags();
    console.log('üìä Banderas actuales:', flags);
    
    // 2. Verificar servicios
    console.log('2Ô∏è‚É£ Verificando servicios...');
    try {
      const { proposalActionService } = await import('../services/proposalActionService.js');
      console.log('‚úÖ ProposalActionService disponible');
    } catch (error) {
      console.log('‚ùå ProposalActionService error:', error.message);
    }
    
    try {
      const { negotiationAIService } = await import('../services/negotiationAIService.js');
      console.log('‚úÖ NegotiationAIService disponible');
    } catch (error) {
      console.log('‚ùå NegotiationAIService error:', error.message);
    }
    
    try {
      const { negotiationAnalyticsService } = await import('../services/negotiationAnalyticsService.js');
      console.log('‚úÖ NegotiationAnalyticsService disponible');
    } catch (error) {
      console.log('‚ùå NegotiationAnalyticsService error:', error.message);
    }
    
    // 3. Verificar componentes
    console.log('3Ô∏è‚É£ Verificando componentes...');
    try {
      const AIModule = await import('../index.jsx');
      console.log('‚úÖ AIModule disponible');
      console.log('üì¶ Componentes disponibles:', Object.keys(AIModule.AIModule));
    } catch (error) {
      console.log('‚ùå AIModule error:', error.message);
    }
    
    // 4. Verificar integraci√≥n con Supabase
    console.log('4Ô∏è‚É£ Verificando conexi√≥n a Supabase...');
    try {
      const { createClient } = await import('@supabase/supabase-js');
      // Esta es una verificaci√≥n b√°sica, la conexi√≥n real se prueba con los servicios
      console.log('‚úÖ Supabase client disponible');
    } catch (error) {
      console.log('‚ùå Supabase error:', error.message);
    }
    
    // 5. Verificar estado del m√≥dulo
    console.log('5Ô∏è‚É£ Verificando estado del m√≥dulo...');
    const moduleEnabled = aiFeatureFlags.isEnabled(AIFeatureFlags.AI_MODULE_ENABLED);
    const negotiationEnabled = aiFeatureFlags.isEnabled(AIFeatureFlags.AI_NEGOTIATION_ENABLED);
    const dashboardEnabled = aiFeatureFlags.isEnabled(AIFeatureFlags.AI_DASHBOARD_ENABLED);
    
    console.log('üîã Estado del m√≥dulo:');
    console.log('   - M√≥dulo IA:', moduleEnabled ? '‚úÖ ACTIVADO' : '‚ùå DESACTIVADO');
    console.log('   - Negociaci√≥n:', negotiationEnabled ? '‚úÖ ACTIVADO' : '‚ùå DESACTIVADO');
    console.log('   - Dashboard:', dashboardEnabled ? '‚úÖ ACTIVADO' : '‚ùå DESACTIVADO');
    
    // 6. Resumen
    console.log('üìã RESUMEN DE PRUEBAS:');
    console.log('   ‚úÖ Sistema de banderas funcionando');
    console.log('   ‚úÖ Servicios importados correctamente');
    console.log('   ‚úÖ Componentes disponibles');
    console.log('   ‚úÖ Conexi√≥n a Supabase disponible');
    console.log('   üìä Estado actual:', moduleEnabled ? 'ACTIVADO' : 'DESACTIVADO');
    
    if (!moduleEnabled) {
      console.log('üí° Para activar el m√≥dulo, ejecuta: activateAIModule()');
    } else {
      console.log('üéâ M√≥dulo de IA est√° listo para usar!');
    }
    
    return {
      success: true,
      flags,
      moduleEnabled,
      services: ['proposalActionService', 'negotiationAIService', 'negotiationAnalyticsService'],
      components: ['Dashboard', 'Config', 'Chat']
    };
    
  } catch (error) {
    console.error('‚ùå Error en pruebas del m√≥dulo de IA:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Funci√≥n para probar una conversaci√≥n de IA simulada
export const testNegotiationFlow = async () => {
  console.log('ü§ñ Probando flujo de negociaci√≥n simulado...');
  
  try {
    const { negotiationAIService } = await import('../services/negotiationAIService.js');
    
    // Simular mensaje de deudor
    const testMessage = {
      content: 'Hola, quiero solicitar un descuento porque estoy en una situaci√≥n dif√≠cil',
      senderType: 'debtor'
    };
    
    // Simular conversaci√≥n
    const testConversation = {
      id: 'test-conversation',
      messages: [testMessage],
      metadata: {
        proposalId: 'test-proposal',
        companyId: 'test-company'
      }
    };
    
    // Simular datos de propuesta
    const testProposalData = {
      id: 'test-proposal',
      amount: 100000,
      dueDate: '2024-12-31',
      company: {
        name: 'Empresa Test',
        maxDiscount: 15,
        maxTermMonths: 12
      }
    };
    
    console.log('üìù Mensaje de prueba:', testMessage.content);
    console.log('üí∞ Datos de propuesta:', testProposalData);
    
    // Intentar generar respuesta (puede fallar si no hay API keys configuradas)
    try {
      const response = await negotiationAIService.generateNegotiationResponse(
        testMessage, 
        testConversation, 
        testProposalData
      );
      
      console.log('‚úÖ Respuesta generada:', response);
      return { success: true, response };
    } catch (apiError) {
      console.log('‚ö†Ô∏è Error de API (esperado si no hay keys configuradas):', apiError.message);
      return { 
        success: false, 
        error: apiError.message,
        note: 'Esto es normal si no hay API keys configuradas'
      };
    }
    
  } catch (error) {
    console.error('‚ùå Error en prueba de negociaci√≥n:', error);
    return { success: false, error: error.message };
  }
};

// Hacer funciones disponibles globalmente
if (typeof window !== 'undefined') {
  window.testAIModule = testAIModule;
  window.testNegotiationFlow = testNegotiationFlow;
  
  console.log('üß™ Funciones de prueba disponibles:');
  console.log('  - testAIModule() para verificar el m√≥dulo completo');
  console.log('  - testNegotiationFlow() para probar flujo de negociaci√≥n');
}
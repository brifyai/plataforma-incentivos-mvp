import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

const supabaseUrl = 'https://wvluqdldygmgncqqjkow.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
const serviceRoleKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY;

console.log('üîç VERIFICACI√ìN AVANZADA DEL BUCKET');
console.log('='.repeat(60));

// Funci√≥n para verificar con m√∫ltiples m√©todos
async function comprehensiveBucketCheck() {
  console.log(`üåê URL de Supabase: ${supabaseUrl}`);
  console.log(`üîë ANON_KEY configurada: ${supabaseKey ? '‚úÖ' : '‚ùå'}`);
  console.log(`üîê SERVICE_ROLE_KEY configurada: ${serviceRoleKey ? '‚úÖ' : '‚ùå'}`);
  
  // M√©todo 1: Verificaci√≥n con cliente normal
  console.log('\nüì° M√âTODO 1: Verificaci√≥n con ANON_KEY');
  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Listar buckets
    const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
    
    if (bucketError) {
      console.error('‚ùå Error listando buckets:', bucketError);
    } else {
      console.log('‚úÖ Lista de buckets obtenida:');
      buckets.forEach(bucket => {
        console.log(`  üìÅ ${bucket.name} (p√∫blico: ${bucket.public})`);
      });
      
      const verificationBucket = buckets.find(b => b.name === 'verification-documents');
      if (verificationBucket) {
        console.log('‚úÖ BUCKET verification-documents ENCONTRADO con ANON_KEY');
        await testBucketAccess(supabase, 'ANON_KEY');
        return true;
      } else {
        console.log('‚ùå BUCKET verification-documents NO ENCONTRADO con ANON_KEY');
      }
    }
  } catch (error) {
    console.error('‚ùå Error con ANON_KEY:', error.message);
  }
  
  // M√©todo 2: Verificaci√≥n con service role (si est√° disponible)
  if (serviceRoleKey) {
    console.log('\nüîë M√âTODO 2: Verificaci√≥n con SERVICE_ROLE_KEY');
    try {
      const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);
      
      const { data: buckets, error: bucketError } = await supabaseAdmin.storage.listBuckets();
      
      if (bucketError) {
        console.error('‚ùå Error con SERVICE_ROLE_KEY:', bucketError.message);
        console.log('üîç La SERVICE_ROLE_KEY parece estar truncada o incorrecta');
      } else {
        console.log('‚úÖ Lista de buckets obtenida con SERVICE_ROLE_KEY:');
        buckets.forEach(bucket => {
          console.log(`  üìÅ ${bucket.name} (p√∫blico: ${bucket.public})`);
        });
        
        const verificationBucket = buckets.find(b => b.name === 'verification-documents');
        if (verificationBucket) {
          console.log('‚úÖ BUCKET verification-documents ENCONTRADO con SERVICE_ROLE_KEY');
          await testBucketAccess(supabaseAdmin, 'SERVICE_ROLE_KEY');
          return true;
        } else {
          console.log('‚ùå BUCKET verification-documents NO ENCONTRADO con SERVICE_ROLE_KEY');
        }
      }
    } catch (error) {
      console.error('‚ùå Error con SERVICE_ROLE_KEY:', error.message);
    }
  }
  
  // M√©todo 3: Intentar acceso directo al bucket (para verificar si existe pero no aparece en lista)
  console.log('\nüéØ M√âTODO 3: Verificaci√≥n directa del bucket');
  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Intentar listar archivos en el bucket (esto falla si el bucket no existe)
    const { data: files, error: filesError } = await supabase.storage
      .from('verification-documents')
      .list('', { limit: 1 });
    
    if (filesError) {
      if (filesError.message.includes('not found') || filesError.message.includes('does not exist')) {
        console.log('‚ùå El bucket verification-documents definitivamente NO EXISTE');
      } else {
        console.log('‚ö†Ô∏è Error de acceso al bucket (puede existir pero sin permisos):', filesError.message);
      }
    } else {
      console.log('‚úÖ BUCKET verification-documents EXISTE y es accesible');
      console.log('üìÑ Archivos encontrados:', files.length);
      return true;
    }
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n directa:', error.message);
  }
  
  // M√©todo 4: Verificar si el usuario dice que subi√≥ un archivo
  console.log('\nü§î M√âTODO 4: Investigando discrepancia');
  console.log('El usuario dice que subi√≥ un archivo, pero el bucket no aparece en las listas.');
  console.log('Posibles causas:');
  console.log('1. üïê El bucket se cre√≥ pero a√∫n no se sincroniza (esperar 2-3 minutos)');
  console.log('2. üîÑ Hay un problema de cach√© en Supabase');
  console.log('3. üìÅ El archivo se subi√≥ a otro bucket');
  console.log('4. üîê Hay permisos que impiden ver el bucket');
  console.log('5. üåê El usuario est√° en un proyecto diferente de Supabase');
  
  return false;
}

// Funci√≥n para probar acceso al bucket
async function testBucketAccess(client, clientType) {
  console.log(`\nüß™ Probando acceso al bucket con ${clientType}:`);
  
  try {
    // Intentar subir un archivo de prueba
    const testFile = new Blob(['test'], { type: 'text/plain' });
    const fileName = `test-${Date.now()}.txt`;
    
    const { data, error } = await client.storage
      .from('verification-documents')
      .upload(fileName, testFile);
    
    if (error) {
      console.log(`‚ùå Error subiendo archivo de prueba: ${error.message}`);
    } else {
      console.log(`‚úÖ Archivo de prueba subido exitosamente: ${data.path}`);
      
      // Intentar eliminar el archivo de prueba
      const { error: deleteError } = await client.storage
        .from('verification-documents')
        .remove([fileName]);
      
      if (deleteError) {
        console.log(`‚ö†Ô∏è No se pudo eliminar archivo de prueba: ${deleteError.message}`);
      } else {
        console.log(`‚úÖ Archivo de prueba eliminado exitosamente`);
      }
    }
  } catch (error) {
    console.error(`‚ùå Error en prueba de acceso: ${error.message}`);
  }
}

// Funci√≥n principal
async function runAdvancedCheck() {
  const bucketExists = await comprehensiveBucketCheck();
  
  console.log('\n' + '='.repeat(60));
  console.log('üèÅ VERIFICACI√ìN AVANZADA COMPLETADA');
  
  if (bucketExists) {
    console.log('‚úÖ RESULTADO: El bucket verification-documents EXISTE y funciona');
    console.log('üí° Si la aplicaci√≥n sigue dando error, recarga la p√°gina y limpia la cach√©');
  } else {
    console.log('‚ùå RESULTADO: El bucket verification-documents NO EXISTE o no es accesible');
    console.log('\nüîß ACCIONES RECOMENDADAS:');
    console.log('1. Ve a: https://supabase.com/dashboard/project/wvluqdldygmgncqqjkow/storage');
    console.log('2. Verifica si ves el bucket "verification-documents" en la lista');
    console.log('3. Si no existe, cr√©alo manualmente');
    console.log('4. Si existe, verifica que sea p√∫blico');
    console.log('5. Espera 2-3 minutos despu√©s de crearlo');
    console.log('6. Recarga la aplicaci√≥n completamente (Ctrl+F5)');
  }
}

// Ejecutar verificaci√≥n avanzada
runAdvancedCheck().catch(console.error);